;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; TicTacChessCheckersFour (alternate implementation for two players);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ROLE Relations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(role red)(role blue);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; INIT Relations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(init (control red))(init (cell 1 5 redPawn))(init (cell 1 4 redChecker))(init (cell 1 3 redKnight))(init (cell 7 3 bluePawn))(init (cell 7 4 blueChecker))(init (cell 7 5 blueKnight))(init (step 1));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; LEGAL Relations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(<= (legal ?player noop)    (role ?player))     (<= (legal ?player (drop ?x))	(true (control ?player))	(chute ?x)	(emptyCell ?x 6))	(<= (legal ?player (pawnMove ?x1 ?y1 ?x2 ?y2))	(true (control ?player))	(true (cell ?x1 ?y1 ?piece))	(piece ?piece pawn ?player)	(orthogonal ?x1 ?y1 ?x2 ?y2)	(onBoard ?x2 ?y2)	(emptyCell ?x2 ?y2))(<= (legal ?player1 (pawnMove ?x1 ?y1 ?x2 ?y2))	(true (control ?player1))	(true (cell ?x1 ?y1 ?piece1))	(piece ?piece1 pawn ?player1)	(diagonal ?x1 ?y1 ?x2 ?y2)	(onBoard ?x2 ?y2)	(true (cell ?x2 ?y2 ?piece2))	(piece ?piece2 ?ignore ?player2)	(distinct ?player1 ?player2))	(<= (legal ?player (knightMove ?x1 ?y1 ?x2 ?y2))	(true (control ?player))	(true (cell ?x1 ?y1 ?piece))	(piece ?piece knight ?player)	(ell ?x1 ?y1 ?x2 ?y2)	(onBoard ?x2 ?y2)	(emptyCell ?x2 ?y2))(<= (legal ?player1 (knightMove ?x1 ?y1 ?x2 ?y2))	(true (control ?player1))	(true (cell ?x1 ?y1 ?piece1))	(piece ?piece1 knight ?player1)	(ell ?x1 ?y1 ?x2 ?y2)	(onBoard ?x2 ?y2)	(true (cell ?x2 ?y2 ?piece2))	(piece ?piece2 ?ignore ?player2)	(distinct ?player1 ?player2))(<= (legal ?player (checkerMove ?x1 ?y1 ?x2 ?y2))	(true (control ?player))	(true (cell ?x1 ?y1 ?piece))	(piece ?piece checker ?player)	(diagonal ?x1 ?y1 ?x2 ?y2)	(onBoard ?x2 ?y2)	(emptyCell ?x2 ?y2))(<= (legal ?player1 (jump ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))	(true (control ?player1))	(true (cell ?x1 ?y1 ?piece1))	(piece ?piece1 checker ?player1)	(upRight ?x1 ?y1 ?x2 ?y2)	(true (cell ?x2 ?y2 ?piece2))	(piece ?piece2 ?ignore ?player2)	(distinct ?player1 ?player2)	(upRight ?x2 ?y2 ?x3 ?y3)	(onBoard ?x3 ?y3)	(emptyCell ?x3 ?y3))(<= (legal ?player1 (jump ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))	(true (control ?player1))	(true (cell ?x1 ?y1 ?piece1))	(piece ?piece1 checker ?player1)	(upLeft ?x1 ?y1 ?x2 ?y2)	(true (cell ?x2 ?y2 ?piece2))	(piece ?piece2 ?ignore ?player2)	(distinct ?player1 ?player2)	(upLeft ?x2 ?y2 ?x3 ?y3)	(onBoard ?x3 ?y3)	(emptyCell ?x3 ?y3))(<= (legal ?player1 (jump ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))	(true (control ?player1))	(true (cell ?x1 ?y1 ?piece1))	(piece ?piece1 checker ?player1)	(downRight ?x1 ?y1 ?x2 ?y2)	(true (cell ?x2 ?y2 ?piece2))	(piece ?piece2 ?ignore ?player2)	(distinct ?player1 ?player2)	(downRight ?x2 ?y2 ?x3 ?y3)	(onBoard ?x3 ?y3)	(emptyCell ?x3 ?y3))(<= (legal ?player1 (jump ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))	(true (control ?player1))	(true (cell ?x1 ?y1 ?piece1))	(piece ?piece1 checker ?player1)	(downLeft ?x1 ?y1 ?x2 ?y2)	(true (cell ?x2 ?y2 ?piece2))	(piece ?piece2 ?ignore ?player2)	(distinct ?player1 ?player2)	(downLeft ?x2 ?y2 ?x3 ?y3)	(onBoard ?x3 ?y3)	(emptyCell ?x3 ?y3))	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; NEXT Relations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(<= (next (control red))	(true (control blue)))(<= (next (control blue))	(true (control red)))(<= (next (cell ?x ?y ?piece))	(true (control ?player))	(does ?player noop)	(true (cell ?x ?y ?piece)))(<= (next (cell ?x ?y ?piece))	(does ?player (drop ?x))	(lowPoint ?x ?y)	(piece ?piece disc ?player))(<= (next (cell ?x ?y ?piece))  	(does ?player (drop ?ignore))  	(true (cell ?x ?y ?piece)))(<= (next (cell ?x2 ?y2 ?piece))	(does ?player (pawnMove ?x1 ?y1 ?x2 ?y2))	(piece ?piece pawn ?player))	(<= (next (cell ?xAny ?yAny ?piece))	(does ?player (pawnMove ?x1 ?y1 ?x2 ?y2))	(distinctCell ?xAny ?yAny ?x1 ?y1)	(distinctCell ?xAny ?yAny ?x2 ?y2)	(true (cell ?xAny ?yAny ?piece)))(<= (next (cell ?x2 ?y2 ?piece))	(does ?player (knightMove ?x1 ?y1 ?x2 ?y2))	(piece ?piece knight ?player))	(<= (next (cell ?xAny ?yAny ?piece))	(does ?player (knightMove ?x1 ?y1 ?x2 ?y2))	(distinctCell ?xAny ?yAny ?x1 ?y1)	(distinctCell ?xAny ?yAny ?x2 ?y2)	(true (cell ?xAny ?yAny ?piece)))(<= (next (cell ?x2 ?y2 ?piece))	(does ?player (checkerMove ?x1 ?y1 ?x2 ?y2))	(piece ?piece checker ?player))	(<= (next (cell ?xAny ?yAny ?piece))	(does ?player (checkerMove ?x1 ?y1 ?x2 ?y2))	(distinctCell ?xAny ?yAny ?x1 ?y1)	(distinctCell ?xAny ?yAny ?x2 ?y2)	(true (cell ?xAny ?yAny ?piece)))(<= (next (cell ?x3 ?y3 ?piece))	(does ?player (jump ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))	(piece ?piece checker ?player))(<= (next (cell ?xAny ?yAny ?piece))	(does ?player (jump ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))	(distinctCell ?xAny ?yAny ?x1 ?y1)	(distinctCell ?xAny ?yAny ?x2 ?y2)	(true (cell ?xAny ?yAny ?piece)))	(<= (next (cell ?xStart ?yStart ?piece))	(does ?player (pawnMove ?x1 ?y1 ?x2 ?y2))	(true (cell ?x2 ?y2 ?piece))	(start ?piece ?xStart ?yStart))(<= (next (cell ?xStart ?yStart ?piece))	(does ?player (knightMove ?x1 ?y1 ?x2 ?y2))	(true (cell ?x2 ?y2 ?piece))	(start ?piece ?xStart ?yStart))(<= (next (cell ?xStart ?yStart ?piece))	(does ?player (jump ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))	(true (cell ?x2 ?y2 ?piece))	(start ?piece ?xStart ?yStart))	(<= (next (step ?t2))	(true (step ?t1))	(stepCount ?t1 ?t2));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; TERMINAL Relations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(<= terminal	(line red))(<= terminal	(line blue))(<= terminal	(true (step 61)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; GOAL Relations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(<= (goal red 100)	(line red))(<= (goal blue 100)	(line blue))(<= (goal ?player 50)	(role ?player)	(not (line red))	(not (line blue))	(true (step 61)))(<= (goal ?player 0)	(role ?player)	(not (line red))	(not (line blue))	(not (true (step 61))))(<= (goal red 0)	(line blue))(<= (goal blue 0)	(line red));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; View Definitions;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(<= (lowPoint ?x ?y)	(lowPointFrom ?x 6 ?x ?y))(<= (lowPointFrom ?x 2 ?x 2)	(index ?x))(<= (lowPointFrom ?x ?y2 ?x ?y2)	(index ?x)	(plus1 ?y1 ?y2)	(not (emptyCell ?x ?y1)))(<= (lowPointFrom ?x ?y3 ?x ?y1)	(index ?x)	(plus1 ?y2 ?y3)	(emptyCell ?x ?y2)	(lowPointFrom ?x ?y2 ?x ?y1))	(<= (orthogonal ?x1 ?y1 ?x2 ?y2)	(up ?x1 ?y1 ?x2 ?y2))(<= (orthogonal ?x1 ?y1 ?x2 ?y2)	(down ?x1 ?y1 ?x2 ?y2))(<= (orthogonal ?x1 ?y1 ?x2 ?y2)	(left ?x1 ?y1 ?x2 ?y2))(<= (orthogonal ?x1 ?y1 ?x2 ?y2)	(right ?x1 ?y1 ?x2 ?y2))(<= (diagonal ?x1 ?y1 ?x2 ?y2)	(upLeft ?x1 ?y1 ?x2 ?y2))(<= (diagonal ?x1 ?y1 ?x2 ?y2)	(upRight ?x1 ?y1 ?x2 ?y2))(<= (diagonal ?x1 ?y1 ?x2 ?y2)	(downLeft ?x1 ?y1 ?x2 ?y2))(<= (diagonal ?x1 ?y1 ?x2 ?y2)	(downRight ?x1 ?y1 ?x2 ?y2))(<= (ell ?x1 ?y1 ?x3 ?y3)	(up ?x1 ?y1 ?x2 ?y2)	(upRight ?x2 ?y2 ?x3 ?y3))(<= (ell ?x1 ?y1 ?x3 ?y3)	(up ?x1 ?y1 ?x2 ?y2)	(upLeft ?x2 ?y2 ?x3 ?y3))(<= (ell ?x1 ?y1 ?x3 ?y3)	(right ?x1 ?y1 ?x2 ?y2)	(upRight ?x2 ?y2 ?x3 ?y3))(<= (ell ?x1 ?y1 ?x3 ?y3)	(right ?x1 ?y1 ?x2 ?y2)	(downRight ?x2 ?y2 ?x3 ?y3))(<= (ell ?x1 ?y1 ?x3 ?y3)	(down ?x1 ?y1 ?x2 ?y2)	(downRight ?x2 ?y2 ?x3 ?y3))(<= (ell ?x1 ?y1 ?x3 ?y3)	(down ?x1 ?y1 ?x2 ?y2)	(downLeft ?x2 ?y2 ?x3 ?y3))(<= (ell ?x1 ?y1 ?x3 ?y3)	(left ?x1 ?y1 ?x2 ?y2)	(upLeft ?x2 ?y2 ?x3 ?y3))(<= (ell ?x1 ?y1 ?x3 ?y3)	(left ?x1 ?y1 ?x2 ?y2)	(downLeft ?x2 ?y2 ?x3 ?y3))(<= (left ?x1 ?y ?x2 ?y)	(plus1 ?x2 ?x1)	(index ?y))(<= (right ?x1 ?y ?x2 ?y)	(plus1 ?x1 ?x2)	(index ?y))(<= (down ?x ?y1 ?x ?y2)	(index ?x)	(plus1 ?y2 ?y1))(<= (up ?x ?y1 ?x ?y2)	(index ?x)	(plus1 ?y1 ?y2))(<= (upLeft ?x1 ?y1 ?x2 ?y2)	(plus1 ?x2 ?x1)	(plus1 ?y1 ?y2))(<= (upRight ?x1 ?y1 ?x2 ?y2)	(plus1 ?x1 ?x2)	(plus1 ?y1 ?y2))(<= (downLeft ?x1 ?y1 ?x2 ?y2)	(plus1 ?x2 ?x1)	(plus1 ?y2 ?y1))(<= (downRight ?x1 ?y1 ?x2 ?y2)	(plus1 ?x1 ?x2)	(plus1 ?y2 ?y1))(<= (controls ?x ?y ?role)    (true (cell ?x ?y ?piece))    (piece ?piece ?ignore ?role))    (<= (onBoard ?x ?y)	(cell ?x ?y)	(distinct ?x 1)	(distinct ?x 7)	(distinct ?y 1)	(distinct ?y 7))(<= (cell ?x ?y)	(index ?x)	(index ?y))(<= (distinctCell ?x1 ?y1 ?x2 ?y2)	(cell ?x1 ?y1)	(cell ?x2 ?y2)	(distinct ?x1 ?x2))(<= (distinctCell ?x1 ?y1 ?x2 ?y2)	(cell ?x1 ?y1)	(cell ?x2 ?y2)	(distinct ?y1 ?y2))(<= (emptyCell ?x ?y)	(cell ?x ?y)    (not (controls ?x ?y red))    (not (controls ?x ?y yellow))    (not (controls ?x ?y blue)))(<= (line ?player)	(row ?player))(<= (line ?player)	(column ?player))(<= (line ?player)	(diag ?player))	(<= (row ?player)	(controls 3 3 ?player)	(controls 4 3 ?player)	(controls 5 3 ?player))(<= (row ?player)	(controls 3 4 ?player)	(controls 4 4 ?player)	(controls 5 4 ?player))(<= (row ?player)	(controls 3 5 ?player)	(controls 4 5 ?player)	(controls 5 5 ?player))    (<= (column ?player)	(controls 3 3 ?player)	(controls 3 4 ?player)	(controls 3 5 ?player))(<= (column ?player)	(controls 4 3 ?player)	(controls 4 4 ?player)	(controls 4 5 ?player))(<= (column ?player)	(controls 5 3 ?player)	(controls 5 4 ?player)	(controls 5 5 ?player))(<= (diag ?player)	(controls 3 3 ?player)	(controls 4 4 ?player)	(controls 5 5 ?player))(<= (diag ?player)	(controls 3 5 ?player)	(controls 4 4 ?player)	(controls 5 3 ?player))    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Static Relations;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(start redPawn 1 5)    (start redChecker 1 4)    (start redKnight 1 3)(start yellowPawn 3 1) (start yellowChecker 4 1) (start yellowKnight 5 1)(start bluePawn 7 3)   (start blueChecker 7 4)   (start blueKnight 7 5)(piece redDisc disc red)       (piece yellowDisc disc yellow)       (piece blueDisc disc blue)(piece redPawn pawn red)       (piece yellowPawn pawn yellow)       (piece bluePawn pawn blue)(piece redChecker checker red) (piece yellowChecker checker yellow) (piece blueChecker checker blue)(piece redKnight knight red)   (piece yellowKnight knight yellow)   (piece blueKnight knight blue)(chute 3) (chute 4) (chute 5)(index 1) (index 2) (index 3) (index 4) (index 5) (index 6) (index 7)(plus1 1 2) (plus1 2 3) (plus1 3 4) (plus1 4 5) (plus1 5 6) (plus1 6 7)(stepCount  1  2) (stepCount  2  3) (stepCount  3  4) (stepCount  4  5) (stepCount  5  6) (stepCount  6  7) (stepCount  7  8) (stepCount  8  9) (stepCount  9 10) (stepCount 10 11)(stepCount 11 12) (stepCount 12 13) (stepCount 13 14) (stepCount 14 15) (stepCount 15 16) (stepCount 16 17) (stepCount 17 18) (stepCount 18 19) (stepCount 19 20) (stepCount 20 21)(stepCount 21 22) (stepCount 22 23) (stepCount 23 24) (stepCount 24 25) (stepCount 25 26) (stepCount 26 27) (stepCount 27 28) (stepCount 28 29) (stepCount 29 30) (stepCount 30 31)(stepCount 31 32) (stepCount 32 33) (stepCount 33 34) (stepCount 34 35) (stepCount 35 36) (stepCount 36 37) (stepCount 37 38) (stepCount 38 39) (stepCount 39 40) (stepCount 40 41)(stepCount 41 42) (stepCount 42 43) (stepCount 43 44) (stepCount 44 45) (stepCount 45 46) (stepCount 46 47) (stepCount 47 48) (stepCount 48 49) (stepCount 49 50) (stepCount 50 51)(stepCount 51 52) (stepCount 52 53) (stepCount 53 54) (stepCount 54 55) (stepCount 55 56) (stepCount 56 57) (stepCount 57 58) (stepCount 58 59) (stepCount 59 60) (stepCount 60 61)